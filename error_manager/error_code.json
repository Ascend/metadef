{
  "error_info_list" : [
    {
      "ErrCode": "E10001",
      "ErrMessage": "Invalid value for %s[%s], %s.",
      "Arglist": "parameter,value,reason"
    },
    {
      "ErrCode": "E10002",
      "ErrMessage": "Parse input parameter [--input_shape]'s shape[%s] failed which %s, correct sample is %s.",
      "Arglist": "shape,reason,sample"
    },
    {
      "ErrCode": "E10003",
      "ErrMessage": "Input parameter --%s[%s] parse failed, reason: %s.",
      "Arglist": "parameter,value,reason"
    },
    {
      "ErrCode": "E10004",
      "ErrMessage": "Input parameter[--%s]'s value is empty!",
      "Arglist": "parameter"
    },
    {
      "ErrCode": "E10005",
      "ErrMessage": "Input parameter[--%s]'s value[%s] must be true or false.",
      "Arglist": "parameter,value"
    },
    {
      "ErrCode": "E10006",
      "ErrMessage": "Input parameter[--%s]'s value must be 1 or 0.",
      "Arglist": "parameter"
    },
    {
      "ErrCode": "E10007",
      "ErrMessage": "Input parameter[--%s] is mandatory and it's value must be: %s.",
      "Arglist": "parameter,support"
    },
    {
      "ErrCode": "E10008",
      "ErrMessage": "Input parameter[--weight]'s value is empty when framework is 0(CAFFE)!",
      "Arglist": ""
    },
    {
      "ErrCode": "E10009",
      "ErrMessage": "--dynamic_batch_size, --dynamic_image_size and --dynamic_dims can only be set one!",
      "Arglist": ""
    },
    {
      "ErrCode": "E10010",
      "ErrMessage": "invalid value for --log:%s, only support debug, info, warning, error, null",
      "Arglist": "loglevel"
    },
    {
      "ErrCode": "E10011",
      "ErrMessage": "Input parameter[--input_shape]’s shape value[%s] is invalid, expect positive integer, but value is %s.",
      "Arglist": "shape,result"
    },
    {
      "ErrCode": "E10012",
      "ErrMessage": "--input_shape's shape size can not be less than 1 when set --dynamic_batch_size.",
      "Arglist": ""
    },
    {
      "ErrCode": "E10013",
      "ErrMessage": "Input parameter[%s]’s value[%s] cause out of range execption!",
      "Arglist": "parameter,value"
    },
    {
      "ErrCode": "E10014",
      "ErrMessage": "Input parameter[%s]’s value[%s] cause invalid argument!",
      "Arglist": "parameter,value"
    },
    {
      "ErrCode": "E10015",
      "ErrMessage": "Input parameter[%s]’s value[%s] cause unkown execption!",
      "Arglist": "parameter,value"
    },
    {
      "ErrCode": "E10016",
      "ErrMessage": "Input parameter[--%s]'s opname[%s] is not exist in model",
      "Arglist": "parameter,opname"
    },
    {
      "ErrCode": "E10017",
      "ErrMessage": "Input parameter[--%s]'s opname[%s] is not a input opname",
      "Arglist": "parameter,opname"
    },
    {
      "ErrCode": "E10018",
      "ErrMessage": "Only batch N can be -1 when set --dynamic_batch_size, current shape[%s] is %s",
      "Arglist": "index,shape"
    },
    {
      "ErrCode": "E10019",
      "ErrMessage": "--input_shape's shape is invalid, only height and width can be -1 when set --dynamic_image_size.",
      "Arglist": ""
    },
    {
      "ErrCode": "E10020",
      "ErrMessage" : "Failed to recognize the dynamic_image_size %s, please check its value, E.g.:imagesize1_height,imagesize1_width;imagesize2_height,imagesize2_width",
      "Arglist": "dynamic_image_size"
    },
    {
      "ErrCode": "E10021",
      "ErrMessage": "Input parameter[--%s]'s path is too long, it must be less than %s",
      "Arglist": "parameter,size"
    },
    {
      "ErrCode": "E10022",
      "ErrMessage": "Input parameter[--%s]'s path[%s] not include file name",
      "Arglist": "parameter,filename"
    },
    {
      "ErrCode": "E10023",
      "ErrMessage": "Input parameter[--singleop]'s value[%s] is not a valid path.",
      "Arglist": "value"
    },
    {
      "ErrCode": "E10024",
      "ErrMessage": "Open file[%s] provided in input parameter[--singleop] failed.",
      "Arglist": "value"
    },
    {
      "ErrCode": "E10025",
      "ErrMessage": "Parse file[%s] provided in input parameter[--singleop] failed, exception = %s",
      "Arglist": "realpath,errmsg"
    },
    {
      "ErrCode": "E10026",
      "ErrMessage": "Op name is empty provided by input parameter[--singleop]",
      "Arglist": ""
    },
    {
      "ErrCode": "E10027",
      "ErrMessage": "%s's %s %s is invalid when the index is %s provided in input parameter[--singleop]",
      "Arglist": "op_name,input,type,index"
    },
    {
      "ErrCode": "E10029",
      "ErrMessage": "%s's attr name is empty provided by input parameter[--singleop]",
      "Arglist": "op_name"
    },
    {
      "ErrCode": "E10030",
      "ErrMessage": "Parse %s's attrname[%s] failed provided by input parameter[--singleop]",
      "Arglist": "op_name,attrname"
    },
    {
      "ErrCode": "E10031",
      "ErrMessage": "At least one batch n must be equal to -1 when set --dynamic_batch_size.",
      "Arglist": ""
    },
    {
      "ErrCode": "E10034",
      "ErrMessage": "This input op [%s] is linked to aipp, can not be set to fp16, please check your atc parameter --insert_op_conf, --input_fp16_nodes.",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E10035",
      "ErrMessage": "Input parameter[--dynamic_batch_size, --dynamic_image_size or --dynamic_dims]'s gears [%s] must be greater than [%s].",
      "Arglist": "shapesize,minshapesize"
    },
    {
      "ErrCode": "E10036",
      "ErrMessage": "Input parameter[--dynamic_batch_size, --dynamic_image_size or --dynamic_dims]'s gears [%s] must be less than [%s].",
      "Arglist": "shapesize,maxshapesize"
    },
    {
      "ErrCode": "E10037",
      "ErrMessage": "Input parameter[--dynamic_batch_size, --dynamic_image_size or --dynamic_dims]'s gears must be same, first group's size is %s and another's is %s.",
      "Arglist": "shapesize1,shapesize2"
    },
    {
      "ErrCode": "E10038",
      "ErrMessage": "Invalid dim[%s], all dims must be greater than 0.",
      "Arglist": "dim"
    },
    {
      "ErrCode": "E10039",
      "ErrMessage": "Input parameter[--dynamic_batch_size, --dynamic_image_size or --dynamic_dims] exist duplicate shapes.",
      "Arglist": ""
    },
    {
      "ErrCode": "E10040",
      "ErrMessage": "Need unknow shape data when user set --dynamic_batch_size, --dynamic_image_size or --dynamic_dims.",
      "Arglist": ""
    },
    {
      "ErrCode" : "E10041",
      "ErrMessage" : "Load model from [%s] failed, please check model file or input parameter[--framework] is correct.",
      "Arglist" : "file"
    },
    {
      "ErrCode": "E10044",
      "ErrMessage": "Current available mem[%s kB] can not be smaller than [%s kB]",
      "Arglist": "value,min_value"
    },
    {
      "ErrCode": "E10045",
      "ErrMessage": "Data[%s] shape[%s] make dynamic dims overflow",
      "Arglist": "name,shape"
    },
    {
      "ErrCode": "E10046",
      "ErrMessage": "Dynamic dims num of data[%s] shape[%s] can not be more than one gear dynamic info size",
      "Arglist": "name,shape"
    },
    {
      "ErrCode": "E10047",
      "ErrMessage": "--%s and --%s can not both exist!",
      "Arglist": "parameter0,parameter1"
    },
    {
      "ErrCode": "E10048",
      "ErrMessage": "Parse input parameter [--input_shape_range]'s shape_range[%s] failed which %s, correct example is %s.",
      "Arglist": "shape_range,reason,sample"
    },
    {
      "ErrCode": "E10049",
      "ErrMessage": "Given shape_range dim num [%s] and current dim num [%s] are not match. Please check.",
      "Arglist": "shape_range_size,cur_dim_size"
    },
    {
      "ErrCode": "E10050",
      "ErrMessage": "Current dim [%s] is out of shape range[%s~%s] set by input_shape_range. Please check.",
      "Arglist": "cur_dim,shape_range_left,shape_range_right"
    },
    {
      "ErrCode": "E10051",
      "ErrMessage": "Input JobId [%s] length > the max sting length [%d].",
      "Arglist": "id, length"
    },
    {
      "ErrCode": "E10052",
      "ErrMessage": "aipp config is invalid, reason:%s.",
      "Arglist": "reason"
    },
    {
      "ErrCode": "E10401",
      "ErrMessage": "Input num mismatch. model expect %s, but given %s.",
      "Arglist": "expect_num, input_num"
    },
    {
      "ErrCode": "E10402",
      "ErrMessage": "Input Buffer size mismatch. index = %s, op expect %s, but given %s(after align).",
      "Arglist": "index, expect_size, input_size"
    },
    {
      "ErrCode": "E10403",
      "ErrMessage": "output num mismatch. op expect %s, but given %s.",
      "Arglist": "expect_num, input_num"
    },
    {
      "ErrCode": "E10404",
      "ErrMessage": "Output Buffer size mismatch. index = %s, op expect %s, but given %s(after align).",
      "Arglist": "index, expect_size, input_size"
    },
    {
      "ErrCode": "E10405",
      "ErrMessage": "Input number mismatches input desc number. Input num = %s, input desc num = %s.",
      "Arglist": "input_num, input_desc_num"
    },
    {
      "ErrCode": "E10406",
      "ErrMessage": "Output number mismatches output desc number. Output num = %s, output desc num = %s.",
      "Arglist": "out_num, out_desc_num"
    },
    {
      "ErrCode": "E10410",
      "ErrMessage": "Can not get real path for %s relate path can't transfer to absolute path, please check.",
      "Arglist": "cfgpath"
    },
    {
      "ErrCode": "E10501",
      "ErrMessage": "IR for op[%s] optype[%s] is not registered.",
      "Arglist": "opname,optype"
    },
    {
      "ErrCode": "E11001",
      "ErrMessage": "input_dim and input_shape can not both exist in NetParameter when do caffe parse!",
      "Arglist": ""
    },
    {
      "ErrCode": "E11002",
      "ErrMessage": "Caffe Model has no input.",
      "Arglist": ""
    },
    {
      "ErrCode": "E11003",
      "ErrMessage": "Model input_dim size[%s] is not 4 times of input size[%s].",
      "Arglist": "input_dim_size,input_size"
    },
    {
      "ErrCode": "E11004",
      "ErrMessage": "caffe net input_shape size[%s] is not equal input size[%s].",
      "Arglist": "input_shape_size,input_size"
    },
    {
      "ErrCode": "E11005",
      "ErrMessage": "Model has input node:%s not define shape by param input_shape.",
      "Arglist": "input"
    },
    {
      "ErrCode": "E11008",
      "ErrMessage": "Op type 'DetectionOutput' is confused. Suggest you modify the model file and use a explicit type, such as 'FSRDetectionOutput' or 'SSDDetectionOutput'.",
      "Arglist": ""
    },
    {
      "ErrCode": "E11009",
      "ErrMessage": "Op[%s] optype[%s]'s parser is not registered in caffe situation",
      "Arglist": "opname,optype"
    },
    {
      "ErrCode": "E11012",
      "ErrMessage": "Unknown bottom blob[%s] in layer[%s], bottom index is [%s].",
      "Arglist": "bottom_blob,layer,bottom_index"
    },
    {
      "ErrCode": "E11014",
      "ErrMessage": "Failed to find top layer name [%s].",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E11015",
      "ErrMessage": "Failed to find bottom layer name [%s].",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E11016",
      "ErrMessage": "Add op[%s] to NetOutput faild, current op output index[%s] should < [%s]. NetOutput input_index[%s] should < [%s].",
      "Arglist": "opname,outputindex,totlaloutputindex,inputindex,totlalinputindex"
    },
    {
      "ErrCode": "E11017",
      "ErrMessage": "Can not find out_node[%s], you should check --out_nodes.",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E11018",
      "ErrMessage": "PreCheck validate string failed, opname [%s] can only contains 'a-z' 'A-Z' '0-9' '-' '.' '_' '/'",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E11021",
      "ErrMessage": "The model file[%s] is consisted of layers-structure which is deprecated in Caffe and unsupported in ATC. The \"layers\" should be changed to \"layer\".",
      "Arglist": "realpath"
    },
    {
      "ErrCode": "E11022",
      "ErrMessage": "net layer num is zero, prototxt file may be invalid.",
      "Arglist": ""
    },
    {
      "ErrCode": "E11023",
      "ErrMessage": "The weight file is consisted of layers-structure which is deprecated in Caffe and unsupported in ATC. The \"layers\" should be changed to \"layer\".",
      "Arglist": ""
    },
    {
      "ErrCode": "E11024",
      "ErrMessage": "weight layer num is zero, weight file may be invalid.",
      "Arglist": ""
    },
    {
      "ErrCode": "E11027",
      "ErrMessage": "Input op's input_param shape size is zero, caffe layer name [%s], layer type [%s].",
      "Arglist": "layername,layertype"
    },
    {
      "ErrCode": "E11029",
      "ErrMessage": "Op[%s] in model file does not exist in weight file.",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E11032",
      "ErrMessage": "Parse %s message failed, error_field:%s, reason:%s.",
      "Arglist": "message_type,name,reason"
    },
    {
      "ErrCode": "E11033",
      "ErrMessage": "Convert weight fail, invalid blob[%s] size[%s], %s.",
      "Arglist": "opname,blobsize,reason"
    },
    {
      "ErrCode": "E11035",
      "ErrMessage": "Data layer[%s] top size must be 1, real size[%s].",
      "Arglist": "opname,size"
    },
    {
      "ErrCode": "E11036",
      "ErrMessage": "Different data node can not have same top name[%s].",
      "Arglist": "topname"
    },
    {
      "ErrCode": "E11037",
      "ErrMessage": "The output size of op[%s] needs to be greater than zero.",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E12004",
      "ErrMessage": "Op[%s] register failed, inputIdx[-%s] abs value should be less than inputsize[%s] when inputIdx < 0.",
      "Arglist": "opname,inputIdx,inputsize"
    },
    {
      "ErrCode": "E12009",
      "ErrMessage": "CheckGraphDef op[%s]'s input op[%s] is not exist in the graph_def.",
      "Arglist": "opname,inputopname"
    },
    {
      "ErrCode": "E12010",
      "ErrMessage": "Model has no Placeholder or _Arg node.",
      "Arglist": ""
    },
    {
      "ErrCode": "E12013",
      "ErrMessage": "Failed to get subgraph by function name [%s].",
      "Arglist": "functionname"
    },
    {
      "ErrCode": "E12029",
      "ErrMessage": "Get subgraph library failed. The model contains function operators. Need to use the script func2graph.py in the atc package to save the subgraphs to graph_def_library.pbtxt",
      "Arglist": ""
    },
    {
      "ErrCode": "E13002",
      "ErrMessage": "Op type[%s] of ops kernel[%s] is unsupported, %s",
      "Arglist": "optype,opskernel,reason"
    },
    {
      "ErrCode": "E13003",
      "ErrMessage": "Can't find any supported ops kernel and engine of [%s], type is [%s]",
      "Arglist": "opname,optype"
    },
    {
      "ErrCode": "E14001",
      "ErrMessage": "Op[%s] type[%s]'s %s is invalid, %s",
      "Arglist": "opname,optype,value,reason"
    },
    {
      "ErrCode": "E16001",
      "ErrMessage": "Model has no %s node.",
      "Arglist": "value"
    },
    {
      "ErrCode": "E16002",
      "ErrMessage": "Op type[%s]'s parser is not registered in onnx situation.",
      "Arglist": "optype"
    },
    {
      "ErrCode": "E16004",
      "ErrMessage": "onnx model don't have graph.",
      "Arglist": ""
    },
    {
      "ErrCode": "E16005",
      "ErrMessage": "The size of domain_version[%s] should be equal to one.",
      "Arglist": "domain_version_size"
    },
    {
      "ErrCode": "E19000",
      "ErrMessage": "Path[%s]'s realpath is empty, errmsg[%s]",
      "Arglist": "path,errmsg"
    },
    {
      "ErrCode": "E19001",
      "ErrMessage": "Open file[%s] failed. errmsg:%s",
      "Arglist": "file,errmsg"
    },
    {
      "ErrCode": "E19002",
      "ErrMessage": "Path[%s] len is too long, it must be less than [%s]",
      "Arglist": "filepath,size"
    },
    {
      "ErrCode": "E19003",
      "ErrMessage": "Read file[%s] failed, errmsg[%s]",
      "Arglist": "file,errmsg"
    },
    {
      "ErrCode": "E19004",
      "ErrMessage": "Write file[%s] failed, errmsg[%s]",
      "Arglist": "file,errmsg"
    },
    {
      "ErrCode": "E19005",
      "ErrMessage": "Parse file[%s] failed. Check whether the protobuf is valid or the fileds is correct.",
      "Arglist": "file"
    },
    {
      "ErrCode": "E19009",
      "ErrMessage": "Check op[%s] failed, the name is repeated.",
      "Arglist": "opname"
    },
    {
      "ErrCode": "E19010",
      "ErrMessage": "Check op[%s]'s type[%s] failed, the type's parser is unregisted.",
      "Arglist": "opname,optype"
    },
    {
      "ErrCode": "E19014",
      "ErrMessage": "Op[%s]'s %s is invalid which %s.",
      "Arglist": "opname,value,reason"
    },
    {
      "ErrCode" : "E19015",
      "ErrMessage" : "File[%s] size is %s, out of range (0,%s).",
      "Arglist" : "file,size,maxsize"
    },
    {
      "ErrCode": "E19018",
      "ErrMessage": "Parse file[%s] through [google::protobuf::TextFormat::Parse] failed,  please check whether the file is a valid protobuf format file.",
      "Arglist": "protofile"
    },
    {
      "ErrCode": "E19022",
      "ErrMessage": "The required memory size[%s] for %s in the model exceeds the system limit[%s]",
      "Arglist": "size,item,maxsize"
    },
    {
      "ErrCode": "E19023",
      "ErrMessage": "The size[%s] of %s in the model exceeds the system limit[%s]",
      "Arglist": "size,item,maxsize"
    },
    {
      "ErrCode": "E19024",
      "ErrMessage": "The env %s[%s] is invalid when %s",
      "Arglist": "env,value,situation"
    },
    {
      "ErrCode": "E19025",
      "ErrMessage": "Input data tensor is invalid when execute, reason:%s",
      "Arglist": "reason"
    },
    {
      "ErrCode": "E19999",
      "ErrMessage": "Unknown error occurred. Please check the log.",
      "Arglist": ""
    },
    {
      "ErrCode": "W11001",
      "ErrMessage": "High-priority service of op[%s] is invalid, low-priority service is used. It can work normally but may affect performance.",
      "Arglist": "opname"
    },
    {
      "ErrCode" : "E30000",
      "ErrMessage" : "System error, load aicpu op libaray information from file %s failed. It does not exist or has wrong content.",
      "Arglist" : "filename"
    },
    {
      "ErrCode" : "E30001",
      "ErrMessage" : "System error, load aicpu kernelinfo from json file %s failed. It does not exist or has wrong content.",
      "Arglist" : "filename"
    },
    {
      "ErrCode" : "E30002",
      "ErrMessage" : "System error, load IR config file %s failed. It does not exist or has wrong content.",
      "Arglist" : "filename"
    },
    {
      "ErrCode" : "E30003",
      "ErrMessage" : "Op[%s] not support, %s.",
      "Arglist" : "opname,errMsg"
    },
    {
      "ErrCode" : "E30004",
      "ErrMessage" : "Calculate op[%s] running parameter failed, %s.",
      "Arglist" : "opname,errMsg"
    },
    {
      "ErrCode" : "E30005",
      "ErrMessage" : "Generate task failed, %s.",
      "Arglist" : "errMsg"
    },
    {
      "ErrCode" : "E30006",
      "ErrMessage" : "System error, generate transfer graph failed, %s.",
      "Arglist" : "errMsg"
    },
    {
      "ErrCode" : "E30007",
      "ErrMessage" : "System error, optimize sub graph failed, %s.",
      "Arglist" : "errMsg"
    },
    {
      "ErrCode" : "E35000",
      "ErrMessage" : "The %sth input of op[%s] has wrong shape%s, the correct shape should be %s.",
      "Arglist" : "index,opname,wrong_shape,correct_shape"
    },
    {
      "ErrCode" : "E35001",
      "ErrMessage" : "The attr[%s] of op[%s] has wrong value[%s], the correct value should be %s.",
      "Arglist" : "attrname,opname,wrong_value,correct_value"
    },
    {
      "ErrCode" : "E35002",
      "ErrMessage" : "The attr[%s] of op[%s] has wrong size[%s], the correct size should be %s.",
      "Arglist" : "attrname,opname,wrong_size,correct_size"
    },
    {
      "ErrCode" : "E35003",
      "ErrMessage" : "Error occur when infer op[%s]'s shape, %s.",
      "Arglist" : "opname,err_msg"
    },
    {
      "ErrCode": "E50000",
      "ErrMessage": "The op [%s] missing [%s] parameter",
      "Arglist": "op_name, param_name"
    },
    {
        "ErrCode": "E50001",
        "ErrMessage": "The length of input [%s] of [%s] op needs to be %s, but the length is [%s]",
        "Arglist": "param,op_name,expected_length, length"
    },
    {
        "ErrCode": "E50002",
        "ErrMessage": "The  format of input [%s] of [%s] op needs to be [%s], but incoming format is [%s]",
        "Arglist": "param,op_name,expected_format_list,format"
    },
    {
        "ErrCode": "E50003",
        "ErrMessage": "The data type of input [%s] of [%s] op needs to be [%s], but incoming data type is [%s]",
        "Arglist": "param,op_name,expected_data_type_list,data_type"
    },
    {
        "ErrCode": "E50004",
        "ErrMessage": "1.The op [%s] input [%s] data type is [%s], but input [%s] data type is [%s], They must meet the rule [%s]",
        "Arglist": "op_name,param1,param1_data_type,param2,param2_data_type,rule"
    },
    {
        "ErrCode": "E50009",
        "ErrMessage": "1.The op [%s] has rule: [%s], but input [%s] shape is [%s]",
        "Arglist": "op_name, rule_desc,param_name, param_shape"
    },
    {
        "ErrCode": "E50012",
        "ErrMessage": "The [%s] op has rule: %s, but [%s] is [%s]",
        "Arglist": "op_name,rule_desc,param_name, param_value"
    },
    {
        "ErrCode": "E50029",
        "ErrMessage": "The op[%s] input parameter[%s] should be [%s], actual the input is [%s]",
        "Arglist": "op_name,param_name,expected_value,input_value"
    },
    {
        "ErrCode": "E50030",
        "ErrMessage": "The op[%s] required input parameter[%s] must exist.",
        "Arglist": "op_name,param_name"
    },
    {
        "ErrCode": "E50031",
        "ErrMessage": "In op[%s], the [%s] of [%s] and [%s] must be same, actual the [%s] of [%s] is [%s] and the [%s] of [%s] is [%s]",
        "Arglist": "op_name,attr_name,param1_name,param2_name,attr_name,param1_name,param1_value,attr_name,param2_name,param2_value"
    },
    {
        "ErrCode": "E50032",
        "ErrMessage": "When dtype of a is [%s], the op[%s] out dtype must in [%s], actual out dtype is [%s]",
        "Arglist": "a_dtype,op_name,expected_dtype_list,out_dtype"
    },
    {
        "ErrCode": "E50033",
        "ErrMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "Arglist": "param_name,op_name,expected_format_list,format"
    },
    {
        "ErrCode": "E50034",
        "ErrMessage": "The dtype of [%s] of op[%s] must in [%s], actual dtype is [%s]",
        "Arglist": "param_name,op_name,expected_dtype_list,dtype"
    },
    {
        "ErrCode": "E50035",
        "ErrMessage": "In op[%s], the dim of [%s] must be [%s], actual input is [%s]",
        "Arglist": "op_name,param_name,expected_length,length"
    },
    {
        "ErrCode": "E50036",
        "ErrMessage": "When the shape of a is [%s] and the shape of b is [%s], the shape of c of op [%s] must be [%s], actual input is [%s]",
        "Arglist": "a_shape,b_shape,op_name, expected_shape,shape"
    },
    {
        "ErrCode": "E50037",
        "ErrMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "Arglist": "param_name,op_name, expected_format_list,format"
    },
    {
        "ErrCode": "E50038",
        "ErrMessage": "In op [%s], the 1d value of shape a should be equal to 0d value of shape b, actual input are [%s] and [%s]",
        "Arglist": "op_name,a_1d,b_0d"
    },
    {
        "ErrCode": "E50039",
        "ErrMessage": "In op[%s], the channel of x should be equal to  filter's, actual input are [%s] and [%s]",
        "Arglist": "op_name,channel_of_x,channel_of_filter"
    },
    {
        "ErrCode": "E50040",
        "ErrMessage": "In op[%s], the [%s] must in range [%s], actual is [%s]",
        "Arglist": "op_name,range,attr_name,value"
    },
    {
        "ErrCode": "E50041",
        "ErrMessage": "In op[%s], the depth of feature map after padding can not be less than shape_filter's, actual are [%s] and [%s]",
        "Arglist": "op_name,depth_of_x,depth_of_filter"
    },
    {
        "ErrCode": "E50042",
        "ErrMessage": "In op[%s], the depth of pad can not be less than shape_filter's, actual are [%s] and [%s]",
        "Arglist": "op_name,depth_of_pad,depth_of_filter"
    },
    {
        "ErrCode": "E50043",
        "ErrMessage": "In op[%s], x H(after pad) must >= filter H, actual are [%s] and [%s]",
        "Arglist": "op_name,h_of_x,h_of_filter"
    },
    {
        "ErrCode": "E50044",
        "ErrMessage": "In op[%s], x W(after pad) must >= filter W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_filter"
    },
    {
        "ErrCode": "E50045",
        "ErrMessage": "In op[%s],filter H must > Pad H, actual are [%s] and [%s]",
        "Arglist": "op_name,h_of_filter,h_of_pad"
    },
    {
        "ErrCode": "E50046",
        "ErrMessage": "In op[%s],filter W must > Pad W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_filter,w_of_pad"
    },
    {
        "ErrCode": "E50047",
        "ErrMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_filter"
    },
    {
        "ErrCode": "E50048",
        "ErrMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_stride"
    },
    {
        "ErrCode": "E50049",
        "ErrMessage": "In op[%s], [%s] exceed 64 bit limitations",
        "Arglist": "op_name,attr_name"
    },
    {
        "ErrCode": "E50050",
        "ErrMessage": "In op [%s], only support pads model [%s], actual is [%s]",
        "Arglist": "op_name,expected_pad_mode,actual_pad_mode"
    },
    {
        "ErrCode": "E50051",
        "ErrMessage": "In op[%s], Invalid input size due to large kernel size and stride",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E50052",
        "ErrMessage": "In op[%s], Dilations in the batch and depth dimensions must be 1,actual are [%s] and [%s].",
        "Arglist": "op_name,dilation_n,dilation_c"
    },
    {
        "ErrCode": "E50053",
        "ErrMessage": "In op[%s], Shape error : The compute result of H under convolution rule cannot match",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E50054",
        "ErrMessage": "In op[%s], Shape error : The compute result of W under convolution rule cannot match",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E50055",
        "ErrMessage": "In op[%s], Input is too large, the minimum tiling may exceed L1_Buffer",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E50056",
        "ErrMessage": "In V200 op[%s],dilation_h and dilation_w must be 1,actual are [%s] and  [%s]",
        "Arglist": "op_name,dilation_h,dilation_w"
    },
    {
        "ErrCode": "E50057",
        "ErrMessage": "In op [%s], set either [%s] or [%s], not both",
        "Arglist": "op_name,param1_name,param2_name"
    },
    {
        "ErrCode": "E50058",
        "ErrMessage": "In op [%s], [%s]",
        "Arglist": "op_name,description"
    },
    {
        "ErrCode": "E50059",
        "ErrMessage": "In op[%s], x channel should be equal to filter channel*groups, x shape is: [%s], filter shape is: [%s], groups is: [%s]",
        "Arglist": "op_name,x_shape,filter_shape,groups"
    },
    {
        "ErrCode": "E50060",
        "ErrMessage": "In op [%s], [%s]",
        "Arglist": "op_name,description"
    },
    {
        "ErrCode": "E60000",
        "ErrMessage": "The op[%s] input parameter[%s] should be [%s], actual the input is [%s]",
        "Arglist": "op_name,param_name,expected_value,input_value"
    },
    {
        "ErrCode": "E60001",
        "ErrMessage": "The op[%s] required input parameter[%s] must exist.",
        "Arglist": "op_name,param_name"
    },
    {
        "ErrCode": "E60002",
        "ErrMessage": "In op[%s], the [%s] of [%s] and [%s] must be same, actual the [%s] of [%s] is [%s] and the [%s] of [%s] is [%s]",
        "Arglist": "op_name,attr_name,param1_name,param2_name,attr_name,param1_name,param1_value,attr_name,param2_name,param2_value"
    },
    {
        "ErrCode": "E60003",
        "ErrMessage": "When dtype of a is [%s], the op[%s] out dtype must in [%s], actual out dtype is [%s]",
        "Arglist": "a_dtype,op_name,expected_dtype_list,out_dtype"
    },
    {
        "ErrCode": "E60004",
        "ErrMessage": "The format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "Arglist": "param_name,op_name, expected_format_list,format"
    },
    {
        "ErrCode": "E60005",
        "ErrMessage": "The dtype of [%s] of op[%s] must in [%s], actual dtype is [%s]",
        "Arglist": "param_name,op_name,expected_dtype_list,dtype"
    },
    {
        "ErrCode": "E60006",
        "ErrMessage": "In op[%s], the dim of [%s] must be [%s], actual input is [%s]",
        "Arglist": "op_name,param_name,expected_length,length"
    },
    {
        "ErrCode": "E60007",
        "ErrMessage": "When the shape of a is [%s] and the shape of b is [%s], the shape of c of op [%s] must be [%s], actual input is [%s]",
        "Arglist": "a_shape,b_shape,op_name,expected_shape,shape"
    },
    {
        "ErrCode": "E60008",
        "ErrMessage": "The original format of [%s] of op[%s] must in [%s], actual format is [%s]",
        "Arglist": "param_name,op_name,expected_format_list,format"
    },
    {
        "ErrCode": "E60009",
        "ErrMessage": "In op [%s], the 1d value of shape a should be equal to 0d value of shape b, actual input are [%s] and [%s]",
        "Arglist": "op_name,a_1d,b_0d"
    },
    {
        "ErrCode": "E60010",
        "ErrMessage": "In op[%s], the channel of a should be equal to  filter's, actual input are [%s] and [%s]",
        "Arglist": "op_name,channel_of_x,channel_of_filter"
    },
    {
        "ErrCode": "E60011",
        "ErrMessage": "In op[%s], the [%s] must in range [%s], actual is [%s]",
        "Arglist": "op_name,attr_name,range,value"
    },
    {
        "ErrCode": "E60012",
        "ErrMessage": "In op[%s], the depth of feature map after padding can not be less than shape_filter's, actual are [%s] and [%s]",
        "Arglist": "op_name,depth_of_x,depth_of_filter"
    },
    {
        "ErrCode": "E60013",
        "ErrMessage": "In op[%s], the depth of pad can not be less than shape_filter's, actual are [%s] and [%s]",
        "Arglist": "op_name,depth_of_pad,depth_of_filter"
    },
    {
        "ErrCode": "E60014",
        "ErrMessage": "In op[%s], x H(after pad) must >= filter H, actual are [%s] and [%s]",
        "Arglist": "op_name,h_of_x,h_of_filter"
    },
    {
        "ErrCode": "E60015",
        "ErrMessage": "In op[%s], x W(after pad) must >= filter W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_filter"
    },
    {
        "ErrCode": "E60016",
        "ErrMessage": "In op[%s],filter H must > Pad H, actual are [%s] and [%s]",
        "Arglist": "op_name,h_of_filter,h_of_pad"
    },
    {
        "ErrCode": "E60017",
        "ErrMessage": "In op[%s],filter W must > Pad W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_filter,w_of_pad"
    },
    {
        "ErrCode": "E60018",
        "ErrMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_filter"
    },
    {
        "ErrCode": "E60019",
        "ErrMessage": "In op[%s], x W(after pad) must >= stride W, actual are [%s] and [%s]",
        "Arglist": "op_name,w_of_x,w_of_stride"
    },
    {
        "ErrCode": "E60020",
        "ErrMessage": "In op[%s], [%s] exceed 64 bit limitations",
        "Arglist": "op_name,attr_name"
    },
    {
        "ErrCode": "E60021",
        "ErrMessage": "In op [%s], only support pads model [%s], actual is [%s]",
        "Arglist": "op_name,expected_pad_mode,actual_pad_mode"
    },
    {
        "ErrCode": "E60022",
        "ErrMessage": "In op[%s], Invalid input size due to large kernel size and stride",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60023",
        "ErrMessage": "In op[%s], Dilations in the batch and depth dimensions must be 1,actual are [%s] and [%s].",
        "Arglist": "op_name,dilation_n,dilation_c"
    },
    {
        "ErrCode": "E60024",
        "ErrMessage": "In op[%s], Shape error : The compute result of H under convolution rule cannot match",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60025",
        "ErrMessage": "In op[%s], Shape error : The compute result of W under convolution rule cannot match",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60026",
        "ErrMessage": "In op[%s], Input is too large, the minimum tiling may exceed L1_Buffer",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60027",
        "ErrMessage": "In V200 op[%s],dilation_h and dilation_w must be 1,actual are [%s] and  [%s]",
        "Arglist": "op_name,dilation_h,dilation_w"
    },
    {
        "ErrCode": "E60101",
        "ErrMessage": "In op[%s], the last 2 dim of [%s] should be [%s], actual are [%s] ",
        "Arglist": "op_name,param_name,expected_two_dims,actual_two_dim"
    },
    {
        "ErrCode": "E60102",
        "ErrMessage": "When the shape of a is [%s] and the shape of b is [%s], the first 2 dims of c of op[%s] must be [%s], actual input is [%s]",
        "Arglist": "a_shape,b_shape,op_name,expected_first_two_dims,two_dim"
    },
    {
        "ErrCode": "E60103",
        "ErrMessage": "In op[%s], block_in of a should be [%s], actual input is [%s]",
        "Arglist": "op_name,expected_value,value"
    },
    {
        "ErrCode": "E60104",
        "ErrMessage": "In op[%s], block_reduce of a should be [%s], actual input is [%s]",
        "Arglist": "op_name,expected_value,value"
    },
    {
        "ErrCode": "E60105",
        "ErrMessage": "In op[%s], block_out of b should be [%s], actual input is [%s]",
        "Arglist": "op_name,expected_value,value"
    },
    {
        "ErrCode": "E60106",
        "ErrMessage": "In op[%s], block_reduce of b should be [%s], actual input is [%s]",
        "Arglist": "op_name,expected_value,value"
    },
    {
        "ErrCode": "E60107",
        "ErrMessage": "In op[%s], [%s] should be 4d list",
        "Arglist": "op_name,param_name"
    },
    {
        "ErrCode": "E60108",
        "ErrMessage": "In op[%s], [%s]",
        "Arglist": "op_name,reason"
    },
    {
        "ErrCode": "E60109",
        "ErrMessage": "In op[%s], input_memory_type should be 0 or 2, actual is [%s]",
        "Arglist": "op_name,input_memory_type"
    },
    {
        "ErrCode": "E60110",
        "ErrMessage": "In op[%s], output_memory_type should be 0 or 2, actual [%s]",
        "Arglist": "op_name,output_memory_type"
    },
    {
        "ErrCode": "E60111",
        "ErrMessage": "In op[%s], slice_offset is valid, actual is [%s]",
        "Arglist": "op_name,slice_offset"
    },
    {
        "ErrCode": "E60112",
        "ErrMessage": "In op[%s], valid_shape is valid, actual valid_shape is [%s] and shape_in is [%s]",
        "Arglist": "op_name,valid_shape,shape_in"
    },
    {
        "ErrCode": "E60113",
        "ErrMessage": "When dtype of b is int8, the op[%s]'s parameter[transpose_b] value must be False.",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60114",
        "ErrMessage": "In op[%s], [%s],actual is [%s]",
        "Arglist": "op_name,reason,value"
    },
    {
        "ErrCode": "E60028",
        "ErrMessage": "The op [%s] input parameter [%s] should be [%s] type, but the type you enter is [%s]",
        "Arglist": "opname,param_name, optype,optype"
    },
    {
        "ErrCode": "E60029",
        "ErrMessage": "The op [%s] [%s] input does not contain the [%s] key",
        "Arglist": "op_name,param_name, key"
    },
    {
        "ErrCode": "E60030",
        "ErrMessage": "The  length of input [%s] of [%s] op needs to be [%s],but the length is [%s]",
        "Arglist": "param_name, op_name, expected_length, length"
    },
    {
        "ErrCode": "E60031",
        "ErrMessage": "The  format of input [%s] of [%s] op needs to be [%s], but the format you enter is [%s]",
        "Arglist": "param_name,op_name,expeted_format_list,format"
    },
    {
        "ErrCode": "E60032",
        "ErrMessage": "The input[%s] data type of the op[%s] is [%s], but the data type you enter is [%s]",
        "Arglist": "param_name, op_name, expected_data_type_list,data_type"
    },
    {
        "ErrCode": "E60033",
        "ErrMessage": "The op [%s] has rule: %s, but [%s] is [%s]",
        "Arglist": "op_name, rule_desc, param_name,param_value"
    },
    {
        "ErrCode": "E60034",
        "ErrMessage": "The op [%s]'s kernel name[%s] is invalid, it can only contain letters, numbers and underscores, and begin with underscores or letters",
        "Arglist": "op_name,kernel_name"
    },
    {
        "ErrCode": "E60035",
        "ErrMessage": "The op [%s] does not support this fusion mode",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60037",
        "ErrMessage": "In op[%s], the type of [%s] should be in [%s], actual is [%s]",
        "Arglist": "op_name,param_name,type_list,type"
    },
    {
        "ErrCode": "E60038",
        "ErrMessage": "In op[%s], [%s]",
        "Arglist": "op_name,desc"
    },
    {
        "ErrCode": "E60039",
        "ErrMessage": "In op[%s], the [%s] of [%s] should be [%s] than [%s], actual is [%s]",
        "Arglist": "op_name,attr_name,param_name,comparator,expected_value,input_value"
    },
    {
        "ErrCode": "E60040",
        "ErrMessage": "The op[%s] [%s] requires attribute [%s]",
        "Arglist": "op_name,param_name,attr_name"
    },
    {
        "ErrCode": "E60115",
        "ErrMessage": "The op [%s] get illegal tiling parameter",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E60116",
        "ErrMessage": "tiling query has rule: %s",
        "Arglist": "rule_desc"
    },
    {
        "ErrCode": "E60117",
        "ErrMessage": "Failed to generate solution space, because of %s",
        "Arglist": "cause_desc"
    },
    {
        "ErrCode": "E60118",
        "ErrMessage": "Invalid platform,only support [%s]",
        "Arglist": "platform_desc"
    },
    {
        "ErrCode": "E60119",
        "ErrMessage": "In op[%s], Input is too large, the minimum tiling may exceed UB_Buffer",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E61000",
        "ErrMessage": "In op [%s], [%s] should be 4d list",
        "Arglist": "op_name,param_name"
    },
    {
        "ErrCode": "E61001",
        "ErrMessage": "In op [%s], [%s]",
        "Arglist": "op_name,reason"
    },
    {
        "ErrCode": "E61203",
        "ErrMessage": "In op [%s], [%s] , the value is [%s] and [%s]",
        "Arglist": "op_name,sence_params,param_1,param_2"
    },
    {
        "ErrCode": "E61204",
        "ErrMessage": "In op [%s], [%s] , the value is [%s]",
        "Arglist": "op_name,sence_params,param_1"
    },
    {
        "ErrCode": "E61205",
        "ErrMessage": "In op[%s], [%s]",
        "Arglist": "op_name,reason"
    },
    {
        "ErrCode": "E61300",
        "ErrMessage": "In op [%s], [%s] must be [%s] [%s]",
        "Arglist": "op_name,param_name,expect_value,condition"
    },
    {
        "ErrCode": "E61301",
        "ErrMessage": "In op [%s], [%s] must be equal to [%s]",
        "Arglist": "op_name,param_name_1,param_name_2"
    },
    {
        "ErrCode": "E61500",
        "ErrMessage": "In op [%s], input_memory_type should be 0 or 1 or 2, actual is [%s]",
        "Arglist": "op_name,input_memory_type"
    },
    {
        "ErrCode": "E61501",
        "ErrMessage": "In op [%s], output_memory_type should be 0 or 1 or 2, actual [%s]",
        "Arglist": "op_name,output_memory_type"
    },
    {
        "ErrCode": "E61600",
        "ErrMessage": "In op [%s] param [%s] must > 0",
        "Arglist": "op_name, param"
    },
    {
        "ErrCode": "E61601",
        "ErrMessage": "In op [%s], if it is the [%s] cut shape, the [%s] must be [%s]",
        "Arglist": "op_name,scene,param_name"
    },
    {
        "ErrCode": "E61602",
        "ErrMessage": "In op [%s] input parameter [%s] should be [%s] type, but the type you enter is [%s]",
        "Arglist": "op_name, param_name, optype_1, optype_2"
    },
    {
        "ErrCode": "E61603",
        "ErrMessage": "In op [%s] [%s] must equal to [%s]",
        "Arglist": "op_name, optype_1, optype_2"
    },
    {
        "ErrCode": "E62001",
        "ErrMessage": "In op[%s],dilation_h, dilation_w and dilation_d must be 1,actual are [%s], [%s] and  [%s].",
        "Arglist": "op_name,para1,para2,para3"
    },
    {
        "ErrCode": "E62002",
        "ErrMessage": "In op[%s], the type and dim of [%s] must be  [%s] and [%s], actual they are  [%s] and [%s] respectively.",
        "Arglist": "op_name,param_name,expected_type,expected_length,type,length"
    },
    {
        "ErrCode": "E62003",
        "ErrMessage": "In op[%s], the size of [%s] on [%s] dimension should be in range [%s], but it is [%s].",
        "Arglist": "op_name,para1,para2,para3,para4"
    },
    {
        "ErrCode": "E62004",
        "ErrMessage": "In op[%s],filter D must > Pad D, actual they are [%s] and [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62005",
        "ErrMessage": "In op[%s], x D(after pad) must >= stride D, actual they are [%s] and [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62006",
        "ErrMessage": "In op[%s],[%s].",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62301",
        "ErrMessage": "In op[%s], the second value of BL1_shape should be a factor of  the block num, actual input is [%s].",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62302",
        "ErrMessage": "In op[%s], the second value of BL1_shape should be even number, but actually it is [%s].",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62303",
        "ErrMessage": "In op[%s], the value of AL1_shape & BL1_shape are  not reasonable, which are [%s] and [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62304",
        "ErrMessage": "In op[%s], the dim of [%s] should be [%s], but it is  [%s].",
        "Arglist": "op_name,para1,para2,para3"
    },
    {
        "ErrCode": "E62305",
        "ErrMessage": "In op[%s], the value of [%s] should be [%s], but it is  [%s].",
        "Arglist": "op_name,param_name,expect_value,value"
    },
    {
        "ErrCode": "E62306",
        "ErrMessage": "In op[%s], [%s].",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62501",
        "ErrMessage": "In op[%s], [%s] should be 6d list.",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62502",
        "ErrMessage": "In op[%s], there is a division by zero operation during calculating, the oprands are [%s] and [%s]. ",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62503",
        "ErrMessage": "In op[%s], the  Fmap's batch must be equal to the batch in backpropagation, it should be [%s], but actually it is [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62504",
        "ErrMessage": "In op[%s], the  Dedy's channel must be equal to the Filter's batch in backpropagation, it should be [%s], but actually it is [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62505",
        "ErrMessage": "In op[%s], the  input's channel must be equal to the Filter's batch in backpropagation, it should be [%s], but actually it is [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62506",
        "ErrMessage": "In op[%s], the  Dedy's channel must be equal to the Filter's channel in backpropagation, it should be [%s], but actually it is [%s].",
        "Arglist": "op_name,para1,para2"
    },
    {
        "ErrCode": "E62507",
        "ErrMessage": "In op[%s], the [%s] dim of Filter(after dilation) must be less than the corresponding dim of input(after padding), they are [%s] and [%s].",
        "Arglist": "op_name,para1,para2,para3"
    },
    {
        "ErrCode": "E62508",
        "ErrMessage": "In op[%s], Shape error : The compute result of D under convolution rule cannot match.",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E62509",
        "ErrMessage": "In op[%s], the type of axis of [%s] must be positive int.",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E62510",
        "ErrMessage": "In op[%s], Dilations in the batch and channel dimensions must be 1.",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E62511",
        "ErrMessage": "In op[%s], C0 must be 16, but actually it is [%s].",
        "Arglist": "op_name,para1"
    },
    {
        "ErrCode": "E64001",
        "ErrMessage": "In op[%s], the [%s] must be int and in range [%s], actual is [%s]",
        "Arglist": "op_name,attr_name, range, value"
    },
    {
        "ErrCode": "E64002",
        "ErrMessage": "In op[%s], [%s] must be equal to [%s], while the input of them are [%s]",
        "Arglist": "op_name, param1, param2, actual_value"
    },
    {
        "ErrCode": "E64003",
        "ErrMessage": "In op[%s], shape format of [%s] must be [%s], and the dim is [%s], actual the dim is [%s]",
        "Arglist": "op_name, param_name, format, expect_dim, dim"
    },
    {
        "ErrCode": "E64004",
        "ErrMessage": "In op[%s], The type of axis of [%s] must be [%s], actual the [%s]ed axis is [%s]",
        "Arglist": "op_name, param_name, axis_rule, wrong_axis, actual_value"
    },
    {
        "ErrCode": "E64005",
        "ErrMessage": "In op[%s], pads must less than filter In [%s], actual input of [%s] are [%s] while filter is [%s]",
        "Arglist": "op_name, direction, pads_dir, pads_value, filter_value "
    },
    {
        "ErrCode": "E64006",
        "ErrMessage": "In tiling of op [%s], k of [%s] must be integral multiply of [%s], actual are [%s] and [%s]",
        "Arglist": "op_name, param_1, param_2, value_1, value_2"
    },
    {
        "ErrCode": "E64007",
        "ErrMessage": "In tiling of op [%s], [%s] of L1 must be integral multiply of L0, that mean [%s] must >=1, actual it is [%s]",
        "Arglist": "op_name, axis_name, param_name, param_value"
    },
    {
        "ErrCode": "E64008",
        "ErrMessage": "In tiling of op [%s], [%s] of [%s] and [%s] must be same, actual they are [%s] and [%s]",
        "Arglist": "op_name, axis_name, param_1, param_2, value_1, value_2"
    },
    {
        "ErrCode": "E64009",
        "ErrMessage": "In tiling of op [%s], it has rules: CUB_matrix[1] = CL0_matrix[1], CUB_matrix[0] is a factor of CL0_matrix[0]",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E64010",
        "ErrMessage": "In tiling of op [%s], value of [%s] can only be 1 or 2, while the value is [%s]",
        "Arglist": "op_name, buffer_name, value"
    },
    {
        "ErrCode": "E65001",
        "ErrMessage": "In op [%s], The type of axis of [%s] must be [%s], actual the [%s]ed axis is [%s]",
        "Arglist": "op_name, param_name, axis_rule, wrong_axis, actual_value"
    },
    {
        "ErrCode": "E65002",
        "ErrMessage": "In op [%s], the dtype of [%s] and [%s] must be equal",
        "Arglist": "op_name, param_1, param_2"
    },
    {
        "ErrCode": "E65003",
        "ErrMessage": "In op[%s], shape format of [%s] must be [%s], and the dim is [%s], actual the dim is [%s]",
        "Arglist": "op_name, param_name, format, expect_dim, dim"
    },
    {
        "ErrCode": "E65004",
        "ErrMessage": "In op[%s], deconvolution not support offset_w now.",
        "Arglist": "op_name"
    },
    {
        "ErrCode": "E65005",
        "ErrMessage": "In op[%s], [%s] must <= [%s]",
        "Arglist": "op_name, param_1, param_2"
    },
    {
        "ErrCode": "E65006",
        "ErrMessage": "In op[%s], the [%s] must be int and in range [%s], actual is [%s]",
        "Arglist": "op_name, attr_name, range, value"
    },
    {
        "ErrCode": "E65007",
        "ErrMessage": "In op[%s], [%s] must be equal to [%s], while the input of them are [%s]",
        "Arglist": "op_name, param1, param2, actual_value"
    },
    {
        "ErrCode": "E65008",
        "ErrMessage": "In op [%s], input_memory_type should be [%s], actual is [%s]",
        "Arglist": "op_name, input_memory_type_range, input_memory_type"
    },
    {
        "ErrCode": "E65009",
        "ErrMessage": "In op [%s], output_memory_type should be [%s], actual is [%s]",
        "Arglist": "op_name, output_memory_type_range, output_memory_type"
    },
    {
      "ErrCode": "E70001",
      "ErrMessage": "In op[%s], the mandatory parameter[%s] is missed.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E70002",
      "ErrMessage": "In op[%s], the format of input[%s] should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,expected_format_list,format"
  },
  {
      "ErrCode": "E70003",
      "ErrMessage": "In op[%s], the dtype of input[%s] should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,expected_data_type_list,data_type"
  },
  {
      "ErrCode": "E70004",
      "ErrMessage": "In op[%s], the parameter[%s]'s type should be [%s],  but actually is [%s].",
      "Arglist": "op_name,param_name,param_type,actual_type"
  },
  {
      "ErrCode": "E70005",
      "ErrMessage": "Op[%s] get attr[%s] failed.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E70006",
      "ErrMessage": "Op[%s] set attr[%s] failed.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E70007",
      "ErrMessage": "The op[%s] input parameter[%s] should be [%s], actual the input is [%s].",
      "Arglist": "op_name,param_name,excepted_value,input_value"
  },
  {
      "ErrCode": "E70008",
      "ErrMessage": "The op [%s] update [%s] param failed.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E70009",
      "ErrMessage": "The op [%s] has rule: %s, but [%s] is [%s].",
      "Arglist": "op_name,rule_desc,param_name,param_value"
  },
  {
      "ErrCode": "E70010",
      "ErrMessage": "In op[%s], the shape size(product of all dimensions) of input[%s] should less than [%s], but actually is [%s].",
      "Arglist": "op_name,input_name,max_value,real_value"
  },
  {
      "ErrCode": "E70011",
      "ErrMessage": "In op[%s], the num of dimensions of input[%s] should be in the range of [%s, %s], but actually is [%s].",
      "Arglist": "op_name,param_name,max_value,min_value,real_value"
  },
  {
    "ErrCode": "E70012",
    "ErrMessage": "In op[%s], the inputs[%s][%s] could not be broadcast together with shapes[%s][%s].",
    "Arglist": "op_name,input1_name,input2_name,input1_shape,input2_shape"
  },
  {
    "ErrCode": "E70013",
    "ErrMessage": "In op[%s], the dtype of inputs[%s][%s] should be same, but actually is [%s][%s].",
    "Arglist": "op_name,input1_name,input2_name,input1_dtype,input2_dtype"
  },
  {
      "ErrCode": "E70014",
      "ErrMessage": "In op[aipp], aipp output H and W should be equal to data's H and W, but actually aipp output H is [%s], aipp output W is [%s], data's H is [%s], data's W is [%s].",
      "Arglist": "aipp_output_H,aipp_output_W,data_H,data_W"
  },
  {
      "ErrCode": "E70015",
      "ErrMessage": "In op[%s], the shape of input[%s] is invalid, [%s].",
      "Arglist": "op_name,param_name,error_detail"
  },
  {
      "ErrCode": "E70016",
      "ErrMessage": "In op[%s], the shape of inputs[%s][%s] are invalid, [%s].",
      "Arglist": "op_name,param_name1,param_name2,error_detail"
  },
  {
      "ErrCode": "E70017",
      "ErrMessage": "In op[%s], the shape of output[%s] is invalid, [%s].",
      "Arglist": "op_name,param_name,error_detail"
  },
  {
      "ErrCode": "E70018",
      "ErrMessage": "In op[%s], failed to get compileparams, mainly get [%s] error.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E80000",
      "ErrMessage": "In op[%s], the parameter[%s] should be [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,excepted_value,real_value"
  },
  {
      "ErrCode": "E80001",
      "ErrMessage": "In op[%s], the mandatory parameter[%s] is missed.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E80002",
      "ErrMessage": "In op[%s], the parameter[%s] should be in the range of [%s, %s], but actually is [%s].",
      "Arglist": "op_name,param_name,min_value,max_value,value"
  },
  {
      "ErrCode": "E80003",
      "ErrMessage": "In op[%s], the parameter[%s]'s type should be [%s],  but actually is [%s].",
      "Arglist": "op_name,param_name,param_type,actual_type"
  },
  {
      "ErrCode": "E80004",
      "ErrMessage": "In op[%s], the input[%s] does not contain the item[%s].",
      "Arglist": "op_name,param_name,key"
  },
  {
      "ErrCode": "E80005",
      "ErrMessage": "In op[%s], the length of parameter[%s] be in the range of [%s, %s], but actually is [%s].",
      "Arglist": "op_name,param_name,min_len,max_len,length"
  },
  {
      "ErrCode": "E80006",
      "ErrMessage": "In op[%s], the input[%s]'s dtype should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,tensor_name,excepted_dtype_list,dtype"
  },
  {
      "ErrCode": "E80007",
      "ErrMessage": "In op[%s], the input[%s]'s dtype could not be none.",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E80008",
      "ErrMessage": "In op[%s], the parameter[%s]'s dtype should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,excepted_dtype_list,dtype"
  },
  {
      "ErrCode": "E80009",
      "ErrMessage": "Op[%s] has rule: %s, but [%s] is [%s].",
      "Arglist": "op_name,rule_desc,param_name,param_value"
  },
  {
      "ErrCode": "E80010",
      "ErrMessage": "In op[%s], the shape of tensor[%s] must be list or tuple, but actually is [%s].",
      "Arglist": "op_name,tensor_name,shape_type"
  },
  {
      "ErrCode": "E80011",
      "ErrMessage": "In op[%s], the shape size(product of all dimensions) of input[%s] should more than [%s], but actually is [%s].",
      "Arglist": "op_name,input_name,min_value,real_value"
  },
  {
      "ErrCode": "E80012",
      "ErrMessage": "In op[%s], the num of dimensions of input[%s] should be in the range of [%s, %s], but actually is [%s].",
      "Arglist": "op_name,param_name,min_value,max_value,real_value"
  },
  {
      "ErrCode": "E80013",
      "ErrMessage": "In op[%s], the inputs[%s][%s] could not be broadcast together with shapes[%s][%s].",
      "Arglist": "op_name,input1_name,input2_name,input1_shape,input2_shape"
  },
  {
      "ErrCode": "E80014",
      "ErrMessage": "In op[%s], the original format of input[%s] should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,excepted_format_list,format"
  },
  {
      "ErrCode": "E80015",
      "ErrMessage": "In op[%s], the format of input[%s] should be one of [%s], but actually is [%s].",
      "Arglist": "op_name,param_name,excepted_format_list,format"
  },
  {
      "ErrCode": "E80016",
      "ErrMessage": "In op[%s], the output[%s]'s type should be one of [%s],  but actually is [%s].",
      "Arglist": "op_name,output_name,expect_type_list,real_type"
  },
  {
      "ErrCode": "E80017",
      "ErrMessage": "In op[%s], the parameter[%s][%s] is not match with the parameter[%s][%s],it should be [%s].",
      "Arglist": "op_name,param_name1,param_name2,param1_shape,param2_shape,expect_shape"
  },
  {
      "ErrCode": "E80018",
      "ErrMessage": "In op[%s], the parameter[%s][%s] are not equal in dtype with dtype[%s][%s].",
      "Arglist": "op_name,param_name1,param_name2,param1_dtype,param2_dtype"
  },
  {
      "ErrCode": "E80019",
      "ErrMessage": "In op[%s], the parameter[%s][%s] are not equal in format with format[%s][%s].",
      "Arglist": "op_name,param_name1,param_name2,param1_format,param2_format"
  },
  {
      "ErrCode": "E80020",
      "ErrMessage": "In op[%s],kernel_name can only contain letters, numbers and underscores, and begin with underscores or letters",
      "Arglist": "op_name"
  },
  {
      "ErrCode": "E80021",
      "ErrMessage": "In op[%s], the length of shape[%s] and the length of range[%s] must be the same.",
      "Arglist": "op_name,shape_len,range_len"
  },
  {
      "ErrCode": "E80022",
      "ErrMessage": "In op[%s], the ndim of first range input[%s] is less than that of the second range input[%s], and the ndim of range should be in the range of [%s, %s].",
      "Arglist": "op_name,first_real_value,second_real_value,min_range_value,max_range_value"
  },
  {
      "ErrCode": "E80023",
      "ErrMessage": "In op[%s],the length of each element in the range must be two",
      "Arglist": "op_name"
  },
  {
      "ErrCode": "E80024",
      "ErrMessage": "In op[%s],the range at the same location must have intersections",
      "Arglist": "op_name"
  },
  {
      "ErrCode": "E80025",
      "ErrMessage": "In op[%s], unsupported expr: [%s]",
      "Arglist": "op_name,param_expr"
  },
  {
      "ErrCode": "E80026",
      "ErrMessage": "In op[%s], it is not mul expr: [%s]",
      "Arglist": "op_name,param_expr"
  },
  {
      "ErrCode": "E80027",
      "ErrMessage": "In op[%s], only support two inputs for broadcast",
      "Arglist": "op_name"
  },
  {
      "ErrCode": "E80028",
      "ErrMessage": "In op[%s], the shape of input[%s] is invalid, [%s].",
      "Arglist": "op_name,param_name,error_detail"
  },
  {
      "ErrCode": "E80029",
      "ErrMessage": "In op[%s], the shape of inputs[%s][%s] are invalid, [%s].",
      "Arglist": "op_name,param_name1,param_name2,error_detail"
  },
  {
      "ErrCode": "E80030",
      "ErrMessage": "In op[%s], the dtype of inputs[%s][%s] are invalid, [%s].",
      "Arglist": "op_name,param_name1,param_name2,error_detail"
  },
  {
      "ErrCode": "E80031",
      "ErrMessage": "In op[%s], the format of inputs[%s][%s] are invalid, [%s].",
      "Arglist": "op_name,param_name1,param_name2,error_detail"
  },
  {
      "ErrCode": "E81000",
      "ErrMessage": "In op[%s], parameter[local_size] is not right, but actually is [%s]",
      "Arglist": "op_name,real_local_size"
  },
  {
      "ErrCode": "E81001",
      "ErrMessage": "In op[LRN], the parameter[norm_region] only support ACROSS_CHANNEl mode, but actually is [%s].",
      "Arglist": "real_norm_region"
  },
  {
      "ErrCode": "E81002",
      "ErrMessage": "In op[Eltwise], the parameter[coeff]'s length[%s] should be equal to inputs' num[%s].",
      "Arglist": "coeff_length,input num "
  },
  {
      "ErrCode": "E81003",
      "ErrMessage": "In op[Eltwise], the shapes[%s] of inputs should be the same.",
      "Arglist": "shapes_list"
  },
  {
      "ErrCode": "E81004",
      "ErrMessage": "In op[Slice], the parameter[axis] and parameter[slice_dim] could not both exist.",
      "Arglist": "-"
  },
  {
      "ErrCode": "E81005",
      "ErrMessage": "In op[Slice], the parameter[slice_axis]'s value[%s] should be not less than parameter[num_axes]'s value[%s].",
      "Arglist": "real_slice_axis,real_num_axes"
  },
  {
      "ErrCode": "E81006",
      "ErrMessage": "In op[%s], Hi3796CV300ES is not supported while the [%s] of input is [%s].",
      "Arglist": "op_name,param_name,real_value"
  },
  {
      "ErrCode": "E81007",
      "ErrMessage": "In op[%s], the parameter [%s] must be greater than 0, but actually is [%s].",
      "Arglist": "op_name,param_name,real_value"
  },
  {
      "ErrCode": "E81008",
      "ErrMessage": "In op[%s], the parameter [%s] must be times of stride**2[%s], but actually is [%s].",
      "Arglist": "op_name,param_name,expect_value,real_value"
  },
  {
      "ErrCode": "E81009",
      "ErrMessage": "In op[%s], the batch of input x[%s] and rois[%s] must be equal.",
      "Arglist": "op_name,param_value1,param_value2"
  },
  {
      "ErrCode": "E81010",
      "ErrMessage": "In op[%s], the parameter %s is invalid, it should follow the rule: self.x_shape[1](%s)//self.y_shape[1](%s) == self.y_shape[2](%s)*self.y_shape[3](%s).",
      "Arglist": "op_name,param_name,param_value1,param_value2,param_value3,param_value4"
  },
  {
      "ErrCode": "E81011",
      "ErrMessage": "In op[%s], the parameter[%s] is invalid,it should follow the rule:(output_dim + C0 -1) // C0 == y_shape[1].",
      "Arglist": "op_name,param_name"
  },
  {
      "ErrCode": "E81012",
      "ErrMessage": "Compile op[aipp] failed, cause: %s.",
      "Arglist": "cause_desc"
  },

  {
     "ErrCode": "E20100",
     "ErrMessage": "The value[%s] of the input option[ge.opSelectImplmode] is not supported, only high_precision  and high_performance are supported.",
     "Arglist": "op_select_impl_mode"
  },
  {
     "ErrCode": "E20101",
     "ErrMessage": "The value[%s] of the input option[%s] is not supported, please check again.",
     "Arglist": "value,option"
  },
  {
     "ErrCode": "E20102",
     "ErrMessage": "The value[%s] of the input option[ge.engineType] is not supported, only AiCore and VectorCore are supported.",
     "Arglist": "engine_type"
  },
  {
     "ErrCode": "E20103",
     "ErrMessage": "The value[%s] of the input option[ge.aicoreNum] is out of range (0, %s].",
     "Arglist": "value,ai_core_num"
  },
  {
     "ErrCode": "E20000",
     "ErrMessage": "Failed to add op[%s] between op[%s, format[%s]] and op[%s, format[%s]], when processing the graph_name[%s].",
     "Arglist": "new_op,src_op,src_format,dest_op,dest_format,graph_name"
  },
  {
     "ErrCode": "E20001",
     "ErrMessage": "Failed to precompile op[%s, optype[%s]], when processing the graph_id[%s], please check the precompiling error message.",
     "Arglist": "op_name,op_type,graph_id"
  },
  {
     "ErrCode": "E20002",
     "ErrMessage": "Failed to precompile op[%s, optype[%s]], when processing the graph_id[%s] in thread[%s] task[%s], please check the precompiling error message.",
     "Arglist": "op_name,op_type,graph_id,thread_id,task_id"
  },
  {
     "ErrCode": "E20003",
     "ErrMessage": "Failed to compile op[%s, optype[%s]], when processing the graph_id[%s], please check the compiling error message.",
     "Arglist": "op_name,op_type,graph_id"
  },
  {
     "ErrCode": "E20004",
     "ErrMessage": "Failed to compile op[%s, optype[%s]], when processing the graph_id[%s] in thread[%s] task[%s], please check the compiling error message.",
     "Arglist": "op_name,op_type,graph_id,thread_id,task_id"
  },
  {
     "ErrCode": "E20005",
     "ErrMessage": "Failed to generate task, when generating the task of op[%s, optype[%s]] of graph_id[%s], please check the error message.",
     "Arglist": "op_name,op_type,graph_id"
  },
  {
     "ErrCode": "E20006",
     "ErrMessage": "Fail to calculate tensor size of op[%s, %s].",
     "Arglist": "op_name,op_type"
  },
  {
     "ErrCode": "E20007",
     "ErrMessage": "Run graph fusion pass failed, pass name:[%s], pass type:[%s].",
     "Arglist": "pass_name,pass_type"
  },
  {
     "ErrCode": "E20008",
     "ErrMessage": "Run pass failed, pass name:[%s], errmsg[%s].",
     "Arglist": "pass_name,errmsg"
  },
  {
     "ErrCode" : "W21000",
     "ErrMessage" : "Path[%s]'s realpath is empty, errmsg[%s]",
     "Arglist" : "path,errmsg"
  },
  {
     "ErrCode" : "E21001",
     "ErrMessage" : "Open file[%s] failed. %s",
     "Arglist" : "file,errmsg"
  },
  {
     "ErrCode" : "E21002",
     "ErrMessage" : "Read file[%s] failed, errmsg[%s]",
     "Arglist" : "file,errmsg"
  },
  {
     "ErrCode" : "E21003",
     "ErrMessage" : "Node[%s] file path is empty, errmsg[%s]",
     "Arglist" : "op_name,errmsg"
  },
  {
     "ErrCode" : "E21004",
     "ErrMessage" : "Set attr to node [%s] failed, errmsg[%s]",
     "Arglist" : "op_name,errmsg"
  },
  {
     "ErrCode" : "E21005",
     "ErrMessage" : "Get attr from node [%s] failed, errmsg[%s]",
     "Arglist" : "op_name,errmsg"
  },
  {
    "ErrCode" : "E21006",
    "ErrMessage" : "The value %s of %s for op %s is invalid, it should be %s.",
    "Arglist" : "value, attr_or_pattern_name, op_type, correct_value."
  },
  {
    "ErrCode" : "E21007",
    "ErrMessage" : "The %s of op %s does not exist.",
    "Arglist" : "attr_or_pattern_name, op_type"
  },
  {
    "ErrCode" : "E21008",
    "ErrMessage" : "Failed to initialize ops kernel store %s.",
    "Arglist" : "ops_store_name"
  },
  {
    "ErrCode" : "E21009",
    "ErrMessage" : "%s",
    "Arglist" : "common_error"
  },
  {
    "ErrCode" : "E2100A",
    "ErrMessage" : "Failed to init fusion priority with file %s",
    "Arglist" : "file"
  },
  {
    "ErrCode" : "E2100B",
    "ErrMessage" : "Failed to init fusion switch with file %s",
    "Arglist" : "file"
  },
  {
    "ErrCode" : "E2101F",
    "ErrMessage" : "[GraphOpt][DtypeJdg][MixedPrecision][Op %s type %s]is in white list but it doesn't support fp16!",
    "Arglist" : "op_name, op_type"
  },
  {
    "ErrCode" : "E21020",
    "ErrMessage" : "[GraphOpt][DtypeJdg][DefaultMode][Op %s type %s] Precision loss is not allowed! %s is not supported.",
    "Arglist" : "op_name, op_type, origin_dtype"
  },
  {
     "ErrCode": "W40000",
     "ErrMessage": "The op [%s] do not support 'impl_mode' parameter.",
     "Arglist": "op_type"
  },
  {
    "ErrCode": "W40001",
    "ErrMessage": "Path of [%s:%s] is invalid, %s.",
    "Arglist": "arg,path,result"
  },
  {
    "ErrCode": "W40002",
    "ErrMessage": "Failed to create directory[%s], %s",
    "Arglist": "path,result"
  },
  {
     "ErrCode": "E40000",
     "ErrMessage": "Failed to import te.platform.log_util.",
     "Arglist": ""
  },
  {
     "ErrCode": "E40001",
     "ErrMessage": "Failed to import python module. [%s].",
     "Arglist": "result"
  },
  {
    "ErrCode": "E40002",
    "ErrMessage": "Failed to call function[%s] with args [%s].",
    "Arglist": "func,args"
  },
  {
     "ErrCode": "E40003",
     "ErrMessage": "Failed to import python module auto tiling manager[%s].",
     "Arglist": "auto_tune_path"
  },
  {
     "ErrCode": "E40004",
     "ErrMessage": "Failed to import python module RL tiling manager[%s].",
     "Arglist": "rl_path"
  },
  {
     "ErrCode": "E40005",
     "ErrMessage": "Op[%s] CheckSupported excute failed, oppath[%s], optype[%s].Please check the op's error message.",
     "Arglist": "op_name,op_path,op_type"
  },
  {
     "ErrCode": "E40006",
     "ErrMessage": "Get op[%s]'s format failed, reason: %s.",
     "Arglist": "op_name,fail_reason"
  },
  {
     "ErrCode": "E40007",
     "ErrMessage": "Prebuild op[%s] failed, oppath[%s], optype[%s]. Please check the op's compilation error message.",
     "Arglist": "op_name,op_path,op_type"
  },
  {
     "ErrCode": "E40008",
     "ErrMessage": "Import python module failed, module path is [%s].",
     "Arglist": "module_path"
  },
  {
     "ErrCode": "E40009",
     "ErrMessage": "Compile op[%s] failed, oppath[%s], optype[%s], taskID[%s]. Please check the op's compilation error message.",
     "Arglist": "op_name,opp_path,op_type,task_id"
  },
  {
    "ErrCode": "E40010",
    "ErrMessage": "Incorrect auto tune mode [%s], please check it.",
    "Arglist": "auto_tune_mode"
  },
  {
    "ErrCode": "E40011",
    "ErrMessage": "Arg[%s] is invalid, %s",
    "Arglist": "arg,reason"
  },
  {
      "ErrCode" : "EA0000",
      "ErrMessage" : "Compile operator failed, cause: %s, %s",
      "Arglist" : "message,traceback"
    },
   {
      "ErrCode" : "EB0000",
      "ErrMessage" : "Compile operator failed, cause: %s, %s",
      "Arglist" : "message,traceback"
    },
    {
      "ErrCode" : "E90000",
      "ErrMessage" : "Compile operator failed, cause: %s %s",
      "Arglist" : "message,traceback"
    },
    {
      "ErrCode" : "EC0000",
      "ErrMessage" : "AutoTune run Failed,lhisi connected failed. Please ping the lhisi_ip or check the es_ip and es_port in config.json",
      "Arglist" : ""
    },
    {  "ErrCode" : "EC0001",
    "ErrMessage" : "AutoTune run Failed,lhisi connected failed. Please check the es_user and es_password in config.json",
    "Arglist" : ""
   },
   {
    "ErrCode" : "EC0002",
    "ErrMessage" : "AutoTune run Failed, LHISI mounted path don't exits, Please check nfs mount path or check the es_password exits in config.json",
    "Arglist" : ""
  },
  {
    "ErrCode" : "EC0004",
    "ErrMessage" : "AutoTune run Failed, Permission denied. Please check ./tss/bin permission rwx in current user or if host isn't root user, please set the export file like ${host_share_path} *(rw,sync,root_squash,anonuid=id*,anongid=gid*)",
    "Arglist" : ""
  },
  {
    "ErrCode" : "EC0003",
    "ErrMessage" : "AutoTune run Failed,FileNotFoundError. Please check the config.json or tss/bin/kernel_perf_comm exists",
    "Arglist" : ""
  },
  {
    "ErrCode" : "EC0005",
    "ErrMessage" : "GATune run Failed. Run .o failed, because soc_version doesn't match the device.",
    "Arglist" : ""
  },
  {
    "ErrCode" : "ED0000",
    "ErrMessage" : "RLTune run Failed. Specify evb_conf for remote devices.",
    "Arglist" : ""
  },
  {
    "ErrCode" : "ED0001",
    "ErrMessage" : "RLTune run Failed. Run .o failed, because soc_version doesn't match the device.",
    "Arglist" : ""
  },
  {
    "ErrCode" : "EE1000",
    "ErrMessage" : "Invalid soc version, please check, version: %s.",
    "Arglist" : "version"
  },
  {
    "ErrCode" : "EE2000",
    "ErrMessage" : "Device is not running, please check if device is working.",
    "Arglist" : ""
  },
  {
    "ErrCode" : "EE2001",
    "ErrMessage" : "Alloc memory for %s failed, alloc size is %sB, please check whether the memory is enough.",
    "Arglist" : "target,size"
  },
  {
    "ErrCode" : "EF0000",
    "ErrMessage" : "Failed to read or write repository files [%s], please check its dir's existence and permission.",
    "Arglist" : "filepath"
  },
  {
    "ErrCode" : "EF0001",
    "ErrMessage" : "Invalid soc_version: [%s], [%s] Fusion only support [%s], please check.",
    "Arglist" : "version,lxtype,version_str"
  },
  {
    "ErrCode" : "WF0000",
    "ErrMessage" : "Open config file [%s] failed, please check its existence, permission and etc.",
    "Arglist" : "filepath"
  },
  {
    "ErrCode" : "WF0001",
    "ErrMessage" : "Config file [%s] format error, it should be json format.",
    "Arglist" : "filepath"
  },
  {
    "ErrCode": "E68000",
    "ErrMessage": "the tiling_type is error, only support [%s], but tiling_type is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68001",
    "ErrMessage": "info_dict should be dict, but the input type is [%s].",
    "Arglist": "real_value"
  },
  {
    "ErrCode": "E68002",
    "ErrMessage": "the keyword [%s] is missing in input params.",
    "Arglist": "keyword"
  },
  {
    "ErrCode": "E68003",
    "ErrMessage": "only support: [%s], but the input is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68004",
    "ErrMessage": "the type of param is illegal, only support [%s], but the type of param is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68005",
    "ErrMessage": "the length of param is illegal, only support [%s], but the length of param is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68006",
    "ErrMessage": "the input param is illegal, don't support [%s], but the param is [%s].",
    "Arglist": "not_expect_value,real_value"
  },
  {
    "ErrCode": "E68007",
    "ErrMessage": "the input param is illegal, only support [%s], but the param is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68008",
    "ErrMessage": "the fm_l1_valid_size must be 1/2, 3/4, 1 times fm_shape_size, but fm_l1_valid_size is [%s], fm_shape_size is [%s].",
    "Arglist": "fm_l1_valid_size,fm_shape_size"
  },
  {
    "ErrCode": "E68009",
    "ErrMessage": "when it is tuning tiling mode, illegal current input params is: [%s].",
    "Arglist": "current_value"
  },
  {
    "ErrCode": "E68010",
    "ErrMessage": "when it is tuning tiling mode, illegal previous input params is: [%s].",
    "Arglist": "previous_value"
  },
  {
    "ErrCode": "E68011",
    "ErrMessage": "tiling params is changed, previous input is [%s], current input is [%s].",
    "Arglist": "previous_value,current_value"
  },
  {
    "ErrCode": "E68012",
    "ErrMessage": "tiling mode is not tuning tiling, current is [%s].",
    "Arglist": "real_value"
  },
  {
    "ErrCode": "E68013",
    "ErrMessage": "only support legal tiling, but the return value of tiling is [%s].",
    "Arglist": "real_value"
  },
  {
    "ErrCode": "E68014",
    "ErrMessage": "the tiling_type is error, dynamic shape not support [%s].",
    "Arglist": "real_value"
  },
  {
    "ErrCode": "E68015",
    "ErrMessage": "only support [%s], but the type of return value is [%s].",
    "Arglist": "expect_value,real_value"
  },
  {
    "ErrCode": "E68016",
    "ErrMessage": "the environment path [%s] is not set or invalid, expect [%s].",
    "Arglist": "env_name,expect_value"
  },
  {
    "ErrCode": "E68017",
    "ErrMessage": "the [%s] model does not support [%s] type.",
    "Arglist": "tiling_model,tiling_type"
  },
  {
    "ErrCode": "E68050",
    "ErrMessage": "[%s] close failed.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68051",
    "ErrMessage": "[%s] should not be empty.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68052",
    "ErrMessage": "get function [%s] failed.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68053",
    "ErrMessage": "only support: [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68054",
    "ErrMessage": "[%s] plugin handler is NULL!",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68055",
    "ErrMessage": "mode = [%s] is not found in [%s].",
    "Arglist": "mode_name,param_name"
  },
  {
    "ErrCode": "E68056",
    "ErrMessage": "platform flag [%s] is not supported.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68057",
    "ErrMessage": "not support costmodel query for platform flag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68058",
    "ErrMessage": "not support costmodel query for opTag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68059",
    "ErrMessage": "cannot find corresponding hardware platform name for platform flag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68060",
    "ErrMessage": "cannot find corresponding op name for opTag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68061",
    "ErrMessage": "not support repository query for platform flag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68062",
    "ErrMessage": "not support repository query for opTag [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68063",
    "ErrMessage": "cannot find corresponding platform flag for platform [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68064",
    "ErrMessage": "CceConfBase::GetInstance Failed.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68065",
    "ErrMessage": "cannot find corresponding loaded [%s].",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68066",
    "ErrMessage": "current operation caused data overflow.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68067",
    "ErrMessage": "tiling index [%s] should not be [%s].",
    "Arglist": "index_name,not_expect_value"
  },
  {
    "ErrCode": "E68068",
    "ErrMessage": "kAL1/kBL1 should be greater than 0 and less than or equal to l1buffer.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68069",
    "ErrMessage": "[%s] should be less than or equal to [%s].",
    "Arglist": "param_name,threshhold"
  },
  {
    "ErrCode": "E68070",
    "ErrMessage": "size of [%s] should be greater than [%s].",
    "Arglist": "size_value,threshhold"
  },
  {
    "ErrCode": "E68071",
    "ErrMessage": "mDim is zero, illegal!",
    "Arglist": ""
  },
  {
    "ErrCode": "E68072",
    "ErrMessage": "divisor can not be zero!",
    "Arglist": ""
  },
  {
    "ErrCode": "E68073",
    "ErrMessage": "The keyword [%s] is not in [%s].",
    "Arglist": "key_name,param_name"
  },
  {
    "ErrCode": "E68074",
    "ErrMessage": "run function [%s] failed.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68075",
    "ErrMessage": "[%s] can not be zero.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68076",
    "ErrMessage": "value at index [%s] of [%s] can not be zero.",
    "Arglist": "index_name,param_name"
  },
  {
    "ErrCode": "E68077",
    "ErrMessage": "the length of all features not up to 46.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68078",
    "ErrMessage": "size of index should be even.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68079",
    "ErrMessage": "cost model close failed.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68080",
    "ErrMessage": "cost model can not be NULL!",
    "Arglist": ""
  },
  {
    "ErrCode": "E68081",
    "ErrMessage": "doing [%s] node decompress fail.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68082",
    "ErrMessage": "the [%s] tree node can not be NULL!",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68083",
    "ErrMessage": "repository is empty!",
    "Arglist": ""
  },
  {
    "ErrCode": "E68084",
    "ErrMessage": "the readable length of key and value of repository are not equal!",
    "Arglist": ""
  },
  {
    "ErrCode": "E68085",
    "ErrMessage": "current op can not be L1 fusion.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68086",
    "ErrMessage": "current op can not be L1/L2 fusion.",
    "Arglist": ""
  },
  {
    "ErrCode": "E68087",
    "ErrMessage": "size of [%s] should be greater than or equal to [%s].",
    "Arglist": "size_value,threshhold"
  },
  {
    "ErrCode": "E68088",
    "ErrMessage": "[%s] open failed.",
    "Arglist": "param_name"
  },
  {
    "ErrCode": "E68089",
    "ErrMessage": "tiling is not found in repository file.",
    "Arglist": ""
  },
  {
    "ErrCode": "EH0001",
    "ErrMessage": "invalid value for %s[%s], %s.",
    "Arglist": "param,value,reason"
  },
  {
    "ErrCode": "EH0002",
    "ErrMessage": "param [%s] must not be null.",
    "Arglist": "param"
  },
  {
    "ErrCode": "EH0003",
    "ErrMessage": "path [%s] is invalid, %s.",
    "Arglist": "path,reason"
  },
  {
    "ErrCode":"EH0004",
    "ErrMessage":"file[%s] is invalid, %s",
    "Arglist":"path,reason"
  },
  {
    "ErrCode":"EH0005",
    "ErrMessage":"set aipp[%s] failed, %s",
    "Arglist":"param,reason"
  },
  {
    "ErrCode":"EH0006",
    "ErrMessage":"%s is unsupported, %s",
    "Arglist":"feature,reason"
  },
  {
    "ErrCode": "EI0001",
    "ErrMessage": "The env % is invalid, %s.",
    "Arglist": "env,reason"
  },
  {
    "ErrCode": "EI0002",
    "ErrMessage": "The so[%s] is not found, Please check that the so file is right.",
    "Arglist": "so_name"
  },
  {
    "ErrCode": "EI0003",
    "ErrMessage": "In [%s], the parameter [%s] 's value[%s] is invalid, %s.",
    "Arglist": "ccl_op,parameter,value,reason"
  }
  ]
}
